
Overview:
---------

GSound is a thin GObject wrapper around libcanberra, a C implementation of
the XDG Sound Theme and Name specifications. It is intended to be used via
GObject introspection in languages such as Python and JavaScript.

It also comes with Vala bindings; whether these are nicer to use than the
Vala bindings shipped with libcanberra itself is a matter of personal taste.
Personally I prefer try/catch to checking integer return values, but other
people's opinions may differ.

Of course, GSound can be used from C as well, but in this case it doesn't
really offer any advantages over using libcanberra directly, other than
some extra typing.

License:
--------

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as published
    by the Free Software Foundation, either version 2.1 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
    General Public License for more details.

Prerequisites:
--------------

Building GSound from git requires a fairly modern Gnome development environment;
so far it's only been tested on Fedora 18. At a minimum, you'll need headers
for GObject, GIO and libcanberra, as well as the needed machinery to generate
GObject introspection data and the Vala VAPI.

Differences from libcanberra:
----------------------------

GSound wraps the libcanberra API very closely, with the following differences:

1) Attribute/value pairs are passed using GHashTables instead of ca_proplists.
This is because most GI consumers have automatic conversion from native dicts or
hashes to GHashTables.

2) Errors are reported using GErrors rather than integer return values. Most
GI consumers map GErrors to native exceptions.

3) Callbacks use the standard GIO async pattern (i.e. call a finish() function on
a GAsyncResult that's handed to a callback you supply).

4) GCancellables are used for cancelling sounds in progress, again for
consistency with GIO.

5) What libcanberra calls "properties" are called "attributes" in GSound to avoid
confusing them with GObject properties.

TODO:
-----

* Write some proper documentation (can largely be based on libcanberra)

* Make vapigen optional

* GTK (and/or Clutter) integration along the lines of libcanberra-gtk3.



Examples:
---------

A couple of very short examples can be found in the tests/ directory.
TODO: write some real tests, and some real examples.

In GJS, the simplest possible example would be something like

const GSound = imports.gi.GSound;

let ctx = new GSound.Context();

try {
    ctx.init(); // GJS doesn't support GInitable directly
    ctx.play_simple(null, // no cancellable
                    "media.filename", "/an/example/file.ogg");
} catch (e) {
    // Handle error
}




